name: Claude Code Review

# OPTIMIZATION: Only runs after CI tests pass to avoid wasting resources on failing builds
on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
    # Focus on Swift/SwiftUI code changes
    paths:
      - "**/*.swift"
      - "**/*.yml"
      - "**/*.yaml"
      - "Scripts/**"
      - ".github/workflows/**"

# Separate concurrency group for reviews to avoid conflicts with testing pipeline
concurrency:
  group: claude-review-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Check that CI tests pass before running Claude review
  check-ci-status:
    name: Wait for CI Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      ci-passed: ${{ steps.check-status.outputs.ci-passed }}
    steps:
      - name: Check CI Status
        id: check-status
        uses: actions/github-script@v7
        with:
          script: |
            
            // Get all check runs for the PR head commit
            const checkRuns = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
            });
            
            console.log(`Found ${checkRuns.data.check_runs.length} check runs`);
            
            // Look for the Build Validation Pipeline workflow
            const buildValidationRuns = checkRuns.data.check_runs.filter(run => 
              run.name.includes('Build Validation Pipeline') || 
              run.name.includes('Build Summary') ||
              run.name === 'Build Summary'
            );
            
            console.log(`Found ${buildValidationRuns.length} build validation runs`);
            
            if (buildValidationRuns.length === 0) {
              console.log('No Build Validation Pipeline found, waiting...');
              core.setOutput('ci-passed', 'waiting');
              return;
            }
            
            // Check if any build validation runs are still pending
            const pendingRuns = buildValidationRuns.filter(run => 
              run.status === 'queued' || run.status === 'in_progress'
            );
            
            if (pendingRuns.length > 0) {
              console.log(`${pendingRuns.length} build validation runs still pending`);
              core.setOutput('ci-passed', 'waiting');
              return;
            }
            
            // Check if all completed runs passed
            const failedRuns = buildValidationRuns.filter(run => 
              run.status === 'completed' && run.conclusion !== 'success'
            );
            
            if (failedRuns.length > 0) {
              console.log(`${failedRuns.length} build validation runs failed`);
              console.log('Failed runs:', failedRuns.map(r => `${r.name}: ${r.conclusion}`));
              core.setOutput('ci-passed', 'false');
              return;
            }
            
            console.log('All build validation runs passed');
            core.setOutput('ci-passed', 'true');

      - name: Wait for CI completion with retries
        if: steps.check-status.outputs.ci-passed == 'waiting'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "‚è≥ CI tests are still running. Implementing smart wait with retries..."
          
          # Wait up to 10 minutes with multiple check intervals
          MAX_WAIT_TIME=600  # 10 minutes total
          CHECK_INTERVAL=60  # Check every minute
          ELAPSED_TIME=0
          
          while [ $ELAPSED_TIME -lt $MAX_WAIT_TIME ]; do
            echo "‚è≥ Waiting for CI tests... (${ELAPSED_TIME}s elapsed, max ${MAX_WAIT_TIME}s)"
            sleep $CHECK_INTERVAL
            ELAPSED_TIME=$((ELAPSED_TIME + CHECK_INTERVAL))
            
            # Re-check CI status
            CI_STATUS=$(gh api repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/check-runs --jq '[.check_runs[] | select(.name | test("Build Summary|Build Validation"))] | if length == 0 then "waiting" elif any(.status == "queued" or .status == "in_progress") then "waiting" elif any(.conclusion != "success") then "failed" else "passed" end')
            
            if [ "$CI_STATUS" = "passed" ]; then
              echo "‚úÖ CI tests completed successfully! Proceeding with Claude review..."
              exit 0
            elif [ "$CI_STATUS" = "failed" ]; then
              echo "‚ùå CI tests failed. Claude review will be skipped."
              exit 1
            fi
            
            echo "‚è≥ CI tests still running, checking again in ${CHECK_INTERVAL}s..."
          done
          
          echo "‚ùå CI tests took longer than ${MAX_WAIT_TIME}s. Claude review will be skipped."
          echo "üí° Tip: Re-run the Claude review workflow manually after CI completes."
          exit 1

  claude-review:
    name: Claude Code Review
    runs-on: ubuntu-latest
    needs: check-ci-status
    timeout-minutes: 10
    # Only run if CI tests passed and not a WIP/skip-review PR
    if: |
      needs.check-ci-status.outputs.ci-passed == 'true' &&
      !contains(github.event.pull_request.title, '[skip-review]') &&
      !contains(github.event.pull_request.title, '[WIP]') &&
      !contains(github.event.pull_request.title, 'WIP:')
    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch more history for better context
          fetch-depth: 0

      - name: Run Claude Code Review
        id: claude-review
        uses: grll/claude-code-action@beta
        with:
          use_oauth: true
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          secrets_admin_pat: ${{ secrets.SECRETS_ADMIN_PAT }}
          
          # Swift/SwiftUI specific review prompt
          direct_prompt: |
            You are conducting a comprehensive code review for a SwiftUI travel planning app called "Traveling Snails". 
            This app uses SwiftData + CloudKit for data persistence and follows modern iOS 18+ patterns.
            
            ‚úÖ **NOTE: All CI tests have passed** - This review runs only after successful build validation.
            
            üîç **CRITICAL ANALYSIS AREAS:**
            
            üîí **SECURITY REVIEW:**
            - Hardcoded secrets, API keys, or sensitive data exposure
            - Input validation and sanitization
            - Secure data handling patterns
            - Logger usage instead of print() statements
            - CloudKit data privacy considerations
            
            üêõ **SWIFTUI/SWIFTDATA BUG DETECTION:**
            - SwiftData infinite recreation anti-patterns (passing model arrays as view parameters)
            - Improper @State/@Observable/@Query usage
            - NavigationView usage (should be NavigationStack)
            - Memory leaks and retain cycles
            - Threading issues with @MainActor
            - CloudKit sync compatibility issues
            
            üì± **MODERN SWIFT PATTERNS:**
            - iOS 18+ SwiftUI patterns compliance
            - Swift Testing instead of XCTest usage
            - Proper async/await and structured concurrency
            - SwiftData relationship patterns
            - Error handling with Result types
            
            üèóÔ∏è **ARCHITECTURE & PATTERNS:**
            - MVVM adherence and dependency injection
            - Service layer organization
            - Protocol usage and testability
            - Separation of concerns
            
            ‚ö° **PERFORMANCE:**
            - Main thread blocking operations
            - Inefficient SwiftData queries
            - View update optimizations
            - CloudKit sync performance
            
            üß™ **TEST COVERAGE:**
            - Missing test scenarios
            - Test isolation and SwiftDataTestBase usage
            - Mock service integration
            
            üìã **OUTPUT FORMAT:**
            Please structure your review as:
            1. **Overall Assessment** (1-2 sentences)
            2. **Critical Issues** (‚ùå Must fix before merge)
            3. **Recommendations** (‚ö†Ô∏è Should consider)
            4. **Positive Observations** (‚úÖ Good patterns)
            5. **File-Specific Notes** (with file:line references)
            
            Be thorough, constructive, and specific. Focus on preventing the SwiftData infinite recreation bug and ensuring modern Swift patterns.

