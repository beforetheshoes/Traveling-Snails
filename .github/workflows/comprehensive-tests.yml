name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Security tests run first and block everything if they fail
  security-tests:
    name: Security Tests
    runs-on: macos-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install dependencies
        run: |
          brew install xcbeautify jq
          
      - name: Debug available simulators
        run: |
          echo "Available Xcode version:"
          xcodebuild -version
          echo "\nAvailable simulators:"
          xcrun simctl list devices | grep "iPhone"
          echo "\nFull device list:"
          xcodebuild -showdestinations -scheme "Traveling Snails" | head -20
        
      - name: Cache Swift packages
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-
            
      - name: Validate script exists
        run: |
          if [ ! -f "./Scripts/run-all-tests.sh" ]; then
            echo "❌ Test script not found"
            exit 1
          fi
          chmod +x ./Scripts/run-all-tests.sh
          
      - name: Run security tests
        run: ./Scripts/run-all-tests.sh --security-only
        
      - name: Enhanced security scan for sensitive data
        run: |
          echo "🔍 Scanning for potential security issues..."
          SECURITY_ISSUES=0
          
          # Enhanced patterns for better detection with iOS-specific exclusions
          echo "Checking for hardcoded credentials..."
          # Exclude legitimate iOS constants and mock service keys
          if grep -r -E "(password|secret|key|token|api_key|auth_token)\s*[:=]\s*['\"][^'\"]{8,}['\"]" \
             --include="*.swift" \
             --exclude-dir=".git" \
             --exclude-dir=".build" \
             --exclude-dir="Traveling Snails Tests" \
             --exclude-dir="Mock" \
             . 2>/dev/null | \
             grep -v -E "(photoLibrary|microphone|camera|location|test|mock|example|demo|NSUbiquitous|PHPhoto|NSLocation|Bundle\.main)" 2>/dev/null; then
            echo "⚠️  Potential hardcoded credentials found"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          echo "Checking for base64 encoded secrets..."
          # Exclude known iOS system constants and legitimate long strings
          if grep -r -E "[A-Za-z0-9+/]{40,}={0,2}" \
             --include="*.swift" \
             --exclude-dir=".git" \
             --exclude-dir=".build" \
             --exclude-dir="Traveling Snails Tests" \
             . 2>/dev/null | \
             grep -v -E "(example|test|demo|mock|NSUbiquitous|PHPhoto|Bundle\.main|forInfoDictionaryKey|mediaTypesRequiring)" 2>/dev/null; then
            echo "⚠️  Potential base64 encoded data found"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          echo "Checking for environment variable leaks..."
          # More specific pattern to avoid false positives with iOS APIs
          if grep -r -E "process\.env\[|getenv\(|ENV\[" \
             --include="*.swift" \
             --exclude-dir=".git" \
             --exclude-dir=".build" \
             --exclude-dir="Traveling Snails Tests" \
             . 2>/dev/null | \
             grep -v -E "(test|example|mock|forInfoDictionaryKey|Bundle\.main)" 2>/dev/null; then
            echo "⚠️  Potential environment variable access found"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          if [ $SECURITY_ISSUES -gt 0 ]; then
            echo "❌ Security scan found $SECURITY_ISSUES potential issues"
            echo "Please review the above findings before proceeding"
            exit 1
          else
            echo "✅ No obvious security issues detected"
          fi
          
      - name: Upload security test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: |
            swiftlint-results.json
            *.log
          retention-days: 7

  # Test matrix for parallel execution - reduces from 7 jobs to 4
  test-matrix:
    name: Test Matrix
    runs-on: macos-latest
    needs: security-tests
    timeout-minutes: 25
    strategy:
      matrix:
        test-type: [unit, integration, performance, swiftdata]
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install xcbeautify
        run: brew install xcbeautify
        
      - name: Cache Swift packages (shared across matrix)
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-
            
      - name: Validate script exists
        run: |
          if [ ! -f "./Scripts/run-all-tests.sh" ]; then
            echo "❌ Test script not found"
            exit 1
          fi
          chmod +x ./Scripts/run-all-tests.sh
            
      - name: Run matrix tests
        run: |
          case "${{ matrix.test-type }}" in
            "unit")
              ./Scripts/run-all-tests.sh --unit-only
              ;;
            "integration")
              ./Scripts/run-all-tests.sh --integration-only
              ;;
            "performance")
              ./Scripts/run-all-tests.sh --performance-only
              ;;
            "swiftdata")
              # Run SwiftData tests specifically
              xcodebuild test \
                -project "Traveling Snails.xcodeproj" \
                -scheme "Traveling Snails" \
                -destination "platform=iOS Simulator,name=iPhone 16" \
                -only-testing:"Traveling Snails Tests/SwiftData Tests" | xcbeautify
              ;;
          esac
        
      - name: Upload ${{ matrix.test-type }} test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.test-type }}-test-results
          path: |
            *.log
          retention-days: 7

  # Build validation runs in parallel with tests
  build-validation:
    name: Build Validation
    runs-on: macos-latest
    needs: security-tests
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install xcbeautify
        run: brew install xcbeautify
        
      - name: Cache Swift packages
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-
            
      - name: Build project
        run: |
          xcodebuild build \
            -project "Traveling Snails.xcodeproj" \
            -scheme "Traveling Snails" \
            -destination "platform=iOS Simulator,name=iPhone 16" | xcbeautify

  # Enhanced SwiftLint analysis (consolidated with better error handling)
  enhanced-linting:
    name: Enhanced Linting
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install analysis tools
        run: brew install jq
        
      - name: Cache Swift packages
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-
            
      - name: Resolve dependencies for SwiftLint
        run: swift package resolve
        
      - name: Run comprehensive SwiftLint analysis
        run: |
          echo "🚀 Running comprehensive SwiftLint analysis..."
          swift run swiftlint lint --config .swiftlint.yml --reporter json > swiftlint-detailed.json || true
          
          # Analyze results with enhanced reporting
          if command -v jq &> /dev/null && [ -f "swiftlint-detailed.json" ]; then
            TOTAL_VIOLATIONS=$(jq 'length' swiftlint-detailed.json 2>/dev/null || echo "0")
            ERROR_COUNT=$(jq '[.[] | select(.severity == "error")] | length' swiftlint-detailed.json 2>/dev/null || echo "0")
            WARNING_COUNT=$(jq '[.[] | select(.severity == "warning")] | length' swiftlint-detailed.json 2>/dev/null || echo "0")
            SECURITY_COUNT=$(jq '[.[] | select(.rule_id | test("print_statements|sensitive_logging|safe_error_messages"))] | length' swiftlint-detailed.json 2>/dev/null || echo "0")
            
            echo "📊 SwiftLint Analysis Results:"
            echo "  Total violations: $TOTAL_VIOLATIONS"
            echo "  Errors: $ERROR_COUNT"
            echo "  Warnings: $WARNING_COUNT"
            echo "  Security issues: $SECURITY_COUNT"
            
            # Generate summary for GitHub
            echo "## SwiftLint Analysis Summary" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total Violations | $TOTAL_VIOLATIONS |" >> $GITHUB_STEP_SUMMARY
            echo "| Errors | $ERROR_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "| Warnings | $WARNING_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "| Security Issues | $SECURITY_COUNT |" >> $GITHUB_STEP_SUMMARY
            
            # Only fail on errors or security violations (not warnings)
            if [ "$ERROR_COUNT" -gt 0 ] || [ "$SECURITY_COUNT" -gt 0 ]; then
              echo "❌ Critical violations found!"
              
              if [ "$SECURITY_COUNT" -gt 0 ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "### 🚨 Security Violations" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                jq -r '.[] | select(.rule_id | test("print_statements|sensitive_logging|safe_error_messages")) | "\(.file):\(.line) - \(.rule_id): \(.reason)"' swiftlint-detailed.json 2>/dev/null >> $GITHUB_STEP_SUMMARY || true
                echo '```' >> $GITHUB_STEP_SUMMARY
              fi
              
              if [ "$ERROR_COUNT" -gt 0 ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "### ❌ Error Violations (Top 10)" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                jq -r '.[] | select(.severity == "error") | "\(.file):\(.line) - \(.rule_id): \(.reason)"' swiftlint-detailed.json 2>/dev/null | head -10 >> $GITHUB_STEP_SUMMARY || true
                echo '```' >> $GITHUB_STEP_SUMMARY
              fi
              
              exit 1
            else
              echo "✅ No critical violations found (Errors: $ERROR_COUNT, Security: $SECURITY_COUNT)"
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "✅ **Critical SwiftLint checks passed!**" >> $GITHUB_STEP_SUMMARY
              if [ "$WARNING_COUNT" -gt 0 ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "⚠️ Note: $WARNING_COUNT formatting warnings exist but do not block CI" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          else
            echo "⚠️  jq not available or no SwiftLint results, falling back to standard output"
            swift run swiftlint lint --config .swiftlint.yml
          fi
          
      - name: Upload linting results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: swiftlint-analysis
          path: |
            swiftlint-detailed.json
            *.log
          retention-days: 7

  # Final summary job that requires all tests to pass
  test-summary:
    name: Test Summary
    runs-on: macos-latest
    needs: [security-tests, test-matrix, build-validation, enhanced-linting, dependency-scan]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "🎯 Comprehensive Test Pipeline Summary"
          echo "======================================"
          
          # Create comprehensive summary
          echo "## 🎯 Test Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Matrix | ${{ needs.test-matrix.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Validation | ${{ needs.build-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Enhanced Linting | ${{ needs.enhanced-linting.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          
          # Check if all required jobs passed (treat cancelled as failure)
          if [[ "${{ needs.security-tests.result }}" == "success" && \
                "${{ needs.test-matrix.result }}" == "success" && \
                "${{ needs.build-validation.result }}" == "success" && \
                "${{ needs.enhanced-linting.result }}" == "success" && \
                "${{ needs.dependency-scan.result }}" == "success" ]]; then
            echo "✅ ALL TESTS PASSED!"
            echo "🚀 Codebase is ready for deployment"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ✅ All Tests Passed!" >> $GITHUB_STEP_SUMMARY
            echo "🚀 **Codebase is ready for deployment**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ SOME TESTS FAILED OR WERE CANCELLED!"
            echo "Security Tests: ${{ needs.security-tests.result }}"
            echo "Test Matrix: ${{ needs.test-matrix.result }}"
            echo "Build Validation: ${{ needs.build-validation.result }}"
            echo "Enhanced Linting: ${{ needs.enhanced-linting.result }}"
            echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
            echo ""
            
            # Check for cancelled jobs specifically
            if [[ "${{ needs.test-matrix.result }}" == "cancelled" || \
                  "${{ needs.build-validation.result }}" == "cancelled" ]]; then
              echo "⚠️  Jobs were cancelled - likely due to a newer commit or workflow trigger."
              echo "This can happen with rapid commits or concurrent workflow runs."
            fi
            
            echo "Please ensure all tests complete successfully before merging."
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ❌ Some Tests Failed" >> $GITHUB_STEP_SUMMARY
            echo "**Please fix the failing tests before merging.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Dependency vulnerability scanning (runs with enhanced linting to reduce parallel jobs)
  dependency-scan:
    name: Dependency Security Scan
    runs-on: macos-latest
    needs: security-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install analysis tools
        run: brew install jq
          
      - name: Comprehensive dependency security scan
        run: |
          echo "🔍 Scanning Swift Package dependencies for vulnerabilities..."
          
          # Extract package dependencies
          if [ -f "Package.resolved" ]; then
            echo "📦 Found Package.resolved - analyzing dependencies:"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 📦 Dependency Analysis" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # List all dependencies in summary
            echo "### Dependencies Found:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            jq -r '.pins[] | "\(.identity): \(.state.version // .state.revision)"' Package.resolved 2>/dev/null >> $GITHUB_STEP_SUMMARY || \
            cat Package.resolved | grep -E '"identity"|"version"|"revision"' >> $GITHUB_STEP_SUMMARY || \
            echo "Unable to parse Package.resolved" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ⚠️ Manual Security Review Recommended For:" >> $GITHUB_STEP_SUMMARY
            echo "- SwiftLint and its dependencies" >> $GITHUB_STEP_SUMMARY
            echo "- Any third-party packages" >> $GITHUB_STEP_SUMMARY
            echo "- Check for known vulnerabilities in these versions" >> $GITHUB_STEP_SUMMARY
          else
            echo "📦 No Package.resolved found - checking Package.swift"
            if [ -f "Package.swift" ]; then
              echo "### Package.swift Dependencies:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              grep -E "url:|from:|exact:" Package.swift >> $GITHUB_STEP_SUMMARY || echo "No external dependencies found in Package.swift" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo ""
          echo "✅ Dependency scan completed"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💡 For Comprehensive Vulnerability Scanning, Consider:" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub's Dependabot" >> $GITHUB_STEP_SUMMARY
          echo "- OWASP dependency-check" >> $GITHUB_STEP_SUMMARY
          echo "- Snyk or similar tools" >> $GITHUB_STEP_SUMMARY

