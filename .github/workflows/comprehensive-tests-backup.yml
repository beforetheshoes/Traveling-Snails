name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Security tests run first and block everything if they fail
  security-tests:
    name: Security Tests
    runs-on: macos-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install xcbeautify
        run: brew install xcbeautify
        
      - name: Install jq for security analysis
        run: brew install jq
        
      - name: Cache Swift packages
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-
            
      - name: Resolve dependencies
        run: swift package resolve
        
      - name: Run security tests
        run: ./Scripts/run-all-tests.sh --security-only
        
      - name: Security scan for sensitive data
        run: |
          echo "üîç Scanning for potential security issues..."
          # Check for hardcoded credentials, API keys, etc.
          if grep -r -E "(password|secret|key|token)\s*=\s*['\"][^'\"]*['\"]" \
             --include="*.swift" \
             --exclude-dir=".git" \
             --exclude-dir=".build" \
             --exclude-dir="Traveling Snails Tests" \
             . || true; then
            echo "‚ö†Ô∏è  Potential hardcoded credentials found above"
          else
            echo "‚úÖ No obvious hardcoded credentials detected"
          fi
          
      - name: Upload security test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: |
            swiftlint-results.json
            *.log
          retention-days: 7

  # Unit tests run in parallel with integration tests
  unit-tests:
    name: Unit Tests
    runs-on: macos-latest
    needs: security-tests
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install xcbeautify
        run: brew install xcbeautify
        
      - name: Cache Swift packages
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-
            
      - name: Run unit tests
        run: ./Scripts/run-all-tests.sh --unit-only
        
      - name: Upload unit test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            *.log
          retention-days: 7

  # Integration tests run in parallel with unit tests
  integration-tests:
    name: Integration Tests
    runs-on: macos-latest
    needs: security-tests
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install xcbeautify
        run: brew install xcbeautify
        
      - name: Cache Swift packages
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-
            
      - name: Run integration tests
        run: ./Scripts/run-all-tests.sh --integration-only
        
      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            *.log
          retention-days: 7

  # Performance tests run separately due to their nature
  performance-tests:
    name: Performance Tests
    runs-on: macos-latest
    needs: security-tests
    timeout-minutes: 25
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install xcbeautify
        run: brew install xcbeautify
        
      - name: Cache Swift packages
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-
            
      - name: Run performance tests
        run: ./Scripts/run-all-tests.sh --performance-only
        
      - name: Upload performance test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: |
            *.log
          retention-days: 7

  # SwiftData tests (critical for app functionality)
  swiftdata-tests:
    name: SwiftData Tests
    runs-on: macos-latest
    needs: security-tests
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install xcbeautify
        run: brew install xcbeautify
        
      - name: Cache Swift packages
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-
            
      - name: Run SwiftData tests
        run: |
          xcodebuild test \
            -project "Traveling Snails.xcodeproj" \
            -scheme "Traveling Snails" \
            -destination "platform=iOS Simulator,name=iPhone 16" \
            -only-testing:"Traveling Snails Tests/SwiftData Tests" | xcbeautify
            
      - name: Upload SwiftData test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: swiftdata-test-results
          path: |
            *.log
          retention-days: 7

  # Build validation - ensures project builds successfully
  build-validation:
    name: Build Validation
    runs-on: macos-latest
    needs: security-tests
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install xcbeautify
        run: brew install xcbeautify
        
      - name: Cache Swift packages
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-
            
      - name: Build project
        run: |
          xcodebuild build \
            -project "Traveling Snails.xcodeproj" \
            -scheme "Traveling Snails" \
            -destination "platform=iOS Simulator,name=iPhone 16" | xcbeautify

  # Enhanced SwiftLint analysis (extends existing workflow)
  enhanced-linting:
    name: Enhanced Linting
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install jq for analysis
        run: brew install jq
        
      - name: Cache Swift packages
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-
            
      - name: Resolve dependencies for SwiftLint
        run: swift package resolve
        
      - name: Run enhanced SwiftLint analysis
        run: |
          echo "üöÄ Running comprehensive SwiftLint analysis..."
          swift run swiftlint lint --config .swiftlint.yml --reporter json > swiftlint-detailed.json || true
          
          # Analyze results with detailed reporting
          if command -v jq &> /dev/null && [ -f "swiftlint-detailed.json" ]; then
            TOTAL_VIOLATIONS=$(jq 'length' swiftlint-detailed.json 2>/dev/null || echo "0")
            ERROR_COUNT=$(jq '[.[] | select(.severity == "error")] | length' swiftlint-detailed.json 2>/dev/null || echo "0")
            WARNING_COUNT=$(jq '[.[] | select(.severity == "warning")] | length' swiftlint-detailed.json 2>/dev/null || echo "0")
            SECURITY_COUNT=$(jq '[.[] | select(.rule_id | test("print_statements|sensitive_logging|safe_error_messages"))] | length' swiftlint-detailed.json 2>/dev/null || echo "0")
            
            echo "üìä SwiftLint Analysis Results:"
            echo "  Total violations: $TOTAL_VIOLATIONS"
            echo "  Errors: $ERROR_COUNT"
            echo "  Warnings: $WARNING_COUNT"
            echo "  Security issues: $SECURITY_COUNT"
            
            # Fail if there are errors or security violations
            if [ "$ERROR_COUNT" -gt 0 ] || [ "$SECURITY_COUNT" -gt 0 ]; then
              echo "‚ùå Critical violations found!"
              echo "Security violations:"
              jq -r '.[] | select(.rule_id | test("print_statements|sensitive_logging|safe_error_messages")) | "\(.file):\(.line) - \(.rule_id): \(.reason)"' swiftlint-detailed.json 2>/dev/null || true
              echo "Error violations:"
              jq -r '.[] | select(.severity == "error") | "\(.file):\(.line) - \(.rule_id): \(.reason)"' swiftlint-detailed.json 2>/dev/null | head -10 || true
              exit 1
            fi
          else
            echo "‚ö†Ô∏è  jq not available or no SwiftLint results, falling back to standard output"
            swift run swiftlint lint --config .swiftlint.yml
          fi
          
      - name: Upload linting results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: swiftlint-analysis
          path: |
            swiftlint-detailed.json
            *.log
          retention-days: 7

  # Final summary job that requires all tests to pass
  test-summary:
    name: Test Summary
    runs-on: macos-latest
    needs: [security-tests, unit-tests, integration-tests, performance-tests, swiftdata-tests, build-validation, enhanced-linting]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "üéØ Comprehensive Test Pipeline Summary"
          echo "======================================"
          
          # Check if all required jobs passed
          if [[ "${{ needs.security-tests.result }}" == "success" && \
                "${{ needs.unit-tests.result }}" == "success" && \
                "${{ needs.integration-tests.result }}" == "success" && \
                "${{ needs.performance-tests.result }}" == "success" && \
                "${{ needs.swiftdata-tests.result }}" == "success" && \
                "${{ needs.build-validation.result }}" == "success" && \
                "${{ needs.enhanced-linting.result }}" == "success" ]]; then
            echo "‚úÖ ALL TESTS PASSED!"
            echo "üöÄ Codebase is ready for deployment"
          else
            echo "‚ùå SOME TESTS FAILED!"
            echo "Security Tests: ${{ needs.security-tests.result }}"
            echo "Unit Tests: ${{ needs.unit-tests.result }}"
            echo "Integration Tests: ${{ needs.integration-tests.result }}"
            echo "Performance Tests: ${{ needs.performance-tests.result }}"
            echo "SwiftData Tests: ${{ needs.swiftdata-tests.result }}"
            echo "Build Validation: ${{ needs.build-validation.result }}"
            echo "Enhanced Linting: ${{ needs.enhanced-linting.result }}"
            echo ""
            echo "Please fix the failing tests before merging."
            exit 1
          fi

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Scan Swift Package dependencies
        run: |
          echo "üîç Scanning Swift Package dependencies for vulnerabilities..."
          
          # Extract package dependencies
          if [ -f "Package.resolved" ]; then
            echo "üì¶ Found Package.resolved - analyzing dependencies:"
            
            # List all dependencies
            jq -r '.pins[] | "\(.identity): \(.state.version // .state.revision)"' Package.resolved || \
            cat Package.resolved | grep -E '"identity"|"version"|"revision"' || \
            echo "Unable to parse Package.resolved with jq, showing raw content:"
            
            echo ""
            echo "‚ö†Ô∏è  Manual security review recommended for:"
            echo "  - SwiftLint and its dependencies"
            echo "  - Any third-party packages"
            echo "  - Check for known vulnerabilities in these versions"
          else
            echo "üì¶ No Package.resolved found - checking Package.swift"
            if [ -f "Package.swift" ]; then
              grep -E "url:|from:|exact:" Package.swift || echo "No external dependencies found in Package.swift"
            fi
          fi
          
          echo ""
          echo "‚úÖ Dependency scan completed"
          echo "üí° For comprehensive vulnerability scanning, consider integrating:"
          echo "   - GitHub's Dependabot"
          echo "   - OWASP dependency-check"
          echo "   - Snyk or similar tools"