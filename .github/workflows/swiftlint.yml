name: SwiftLint Security and Code Quality

on:
  push:
    branches: [ main, develop, 'feature/*', 'fix/*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  swiftlint:
    runs-on: macos-latest
    name: SwiftLint Security Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          .build
          SourcePackages
        key: ${{ runner.os }}-spm-${{ hashFiles('Package.swift', 'Package.resolved') }}-v2
        restore-keys: |
          ${{ runner.os }}-spm-${{ hashFiles('Package.swift', 'Package.resolved') }}-
          ${{ runner.os }}-spm-
          
    - name: Resolve Swift Package Dependencies
      run: swift package resolve
      
    - name: Run SwiftLint Security Analysis
      run: |
        echo "🔍 Running SwiftLint with security-focused rules..."
        # Use parallel processing for better performance
        swift run swiftlint lint --config .swiftlint.yml --parallel --reporter github-actions-logging
        
    - name: Check for Critical Security Violations
      run: |
        echo "🚨 Checking for critical security violations..."
        
        # Run SwiftLint with JSON output for better parsing (parallel for performance)
        swift run swiftlint lint --config .swiftlint.yml --parallel --reporter json > violations.json || true
        
        # Use jq for robust JSON parsing of security violations
        PRINT_VIOLATIONS=$(jq -r '.[] | select(.rule_id == "no_print_statements" and .severity == "error") | "\(.file):\(.line): \(.reason)"' violations.json 2>/dev/null || echo "")
        SENSITIVE_VIOLATIONS=$(jq -r '.[] | select(.rule_id | test("sensitive|logging")) | "\(.file):\(.line): \(.reason)"' violations.json 2>/dev/null || echo "")
        
        # Count violations by type
        PRINT_COUNT=$(jq '[.[] | select(.rule_id == "no_print_statements" and .severity == "error")] | length' violations.json 2>/dev/null || echo "0")
        SENSITIVE_COUNT=$(jq '[.[] | select(.rule_id | test("sensitive|logging"))] | length' violations.json 2>/dev/null || echo "0")
        
        # Report findings with better error handling
        if [ "$PRINT_COUNT" -gt 0 ]; then
          echo "❌ CRITICAL: $PRINT_COUNT print statement security violations found:"
          echo "$PRINT_VIOLATIONS"
          echo "::error::Critical security violation: $PRINT_COUNT print statements detected. Use Logger.shared instead."
          exit 1
        fi
        
        if [ "$SENSITIVE_COUNT" -gt 0 ]; then
          echo "⚠️  WARNING: $SENSITIVE_COUNT potential sensitive data logging issues detected:"
          echo "$SENSITIVE_VIOLATIONS"
          echo "::warning::$SENSITIVE_COUNT potential sensitive data in logging detected. Please review."
        fi
        
        # Count total violations using JSON
        VIOLATION_COUNT=$(jq 'length' violations.json 2>/dev/null || echo "0")
        if [ "$VIOLATION_COUNT" -gt 50 ]; then
          echo "::warning::High number of violations detected ($VIOLATION_COUNT). Consider addressing these for better code quality."
        fi
        
        echo "✅ Security check completed. Found $VIOLATION_COUNT total violations."
        
    - name: Performance Monitoring
      run: |
        echo "📊 Monitoring SwiftLint CI performance..."
        
        # Record performance metrics
        START_TIME=$(date +%s)
        swift run swiftlint lint --config .swiftlint.yml --parallel --reporter json > perf-test.json || true
        END_TIME=$(date +%s)
        
        DURATION=$((END_TIME - START_TIME))
        VIOLATIONS=$(jq 'length' perf-test.json 2>/dev/null || echo "0")
        
        echo "⏱️  SwiftLint execution time: ${DURATION}s"
        echo "🔢 Total violations found: $VIOLATIONS"
        
        # Add to step summary for tracking
        echo "## SwiftLint Performance Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- **Execution Time**: ${DURATION}s" >> $GITHUB_STEP_SUMMARY
        echo "- **Violations Found**: $VIOLATIONS" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
        
        # Clean up
        rm -f perf-test.json
        
    - name: Run SwiftLint Autocorrect (Safe Changes Only)
      run: |
        echo "🔧 Running SwiftLint autocorrect for safe style fixes..."
        swift run swiftlint --autocorrect --config .swiftlint.yml || true
        
        # Check if any files were modified
        if [ -n "$(git status --porcelain)" ]; then
          echo "📝 SwiftLint made automatic style corrections:"
          git diff --name-only
          echo "::notice::SwiftLint made automatic style corrections. Consider committing these changes."
        else
          echo "✅ No automatic corrections needed."
        fi
        
    - name: Generate SwiftLint Report
      if: always()
      run: |
        echo "📊 Generating SwiftLint report..."
        swift run swiftlint lint --config .swiftlint.yml --reporter json > swiftlint-report.json || true
        
        # Create a summary
        echo "## SwiftLint Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count violations by severity using robust JSON parsing
        ERRORS=$(jq '[.[] | select(.severity == "error")] | length' swiftlint-report.json 2>/dev/null || echo "0")
        WARNINGS=$(jq '[.[] | select(.severity == "warning")] | length' swiftlint-report.json 2>/dev/null || echo "0")
        
        echo "- **Errors:** $ERRORS" >> $GITHUB_STEP_SUMMARY
        echo "- **Warnings:** $WARNINGS" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add security-specific summary using JSON parsing
        SECURITY_ISSUES=$(jq '[.[] | select(.rule_id | test("print_statements|sensitive_logging|safe_error_messages|security"))] | length' swiftlint-report.json 2>/dev/null || echo "0")
        echo "- **Security Issues:** $SECURITY_ISSUES" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "$ERRORS" -eq 0 ] && [ "$SECURITY_ISSUES" -eq 0 ]; then
          echo "✅ **No critical issues found!**" >> $GITHUB_STEP_SUMMARY
        elif [ "$SECURITY_ISSUES" -gt 0 ]; then
          echo "🚨 **Security issues detected - please review**" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Code quality issues detected**" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Upload SwiftLint Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: swiftlint-report
        path: swiftlint-report.json
        retention-days: 30

  security-summary:
    runs-on: ubuntu-latest
    needs: swiftlint
    if: always()
    name: Security Summary
    
    steps:
    - name: Security Analysis Complete
      run: |
        echo "🛡️ SwiftLint security analysis completed"
        echo "📋 Review the SwiftLint report for any security or code quality issues"
        echo "🔧 Use 'swift run swiftlint --autocorrect' locally to fix style issues"
        echo "📚 See project documentation for SwiftLint configuration details"